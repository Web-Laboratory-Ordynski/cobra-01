!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t=t||self).IMask={})}(this,function(t){"use strict";var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function n(t,e){return t(e={exports:{}},e.exports),e.exports}function u(t){return t&&t.Math==Math&&t}function i(t){try{return!!t()}catch(t){return!0}}function r(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}function f(t){if(null==t)throw TypeError("Can't call method on "+t);return t}function h(t){return _(f(t))}function a(t){return"object"==typeof t?null!==t:"function"==typeof t}function s(t,e){if(!a(t))return t;var n,u;if(e&&"function"==typeof(n=t.toString)&&!a(u=n.call(t)))return u;if("function"==typeof(n=t.valueOf)&&!a(u=n.call(t)))return u;if(!e&&"function"==typeof(n=t.toString)&&!a(u=n.call(t)))return u;throw TypeError("Can't convert object to primitive value")}function c(t,e){return A.call(t,e)}function o(t){if(!a(t))throw TypeError(String(t)+" is not an object");return t}function p(e,n){try{w(d,e,n)}catch(t){d[e]=n}return n}var d=u("object"==typeof globalThis&&globalThis)||u("object"==typeof window&&window)||u("object"==typeof self&&self)||u("object"==typeof e&&e)||Function("return this")(),v=!i(function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}),l={}.propertyIsEnumerable,k=Object.getOwnPropertyDescriptor,g={f:k&&!l.call({1:2},1)?function(t){var e=k(this,t);return!!e&&e.enumerable}:l},y={}.toString,m="".split,_=i(function(){return!Object("z").propertyIsEnumerable(0)})?function(t){return"String"==(e=t,y.call(e).slice(8,-1))?m.call(t,""):Object(t);var e}:Object,A={}.hasOwnProperty,b=d.document,C=a(b)&&a(b.createElement),E=!v&&!i(function(){return 7!=Object.defineProperty(C?b.createElement("div"):{},"a",{get:function(){return 7}}).a}),F=Object.getOwnPropertyDescriptor,S={f:v?F:function(t,e){if(t=h(t),e=s(e,!0),E)try{return F(t,e)}catch(t){}if(c(t,e))return r(!g.f.call(t,e),t[e])}},D=Object.defineProperty,B={f:v?D:function(t,e,n){if(o(t),e=s(e,!0),o(n),E)try{return D(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},w=v?function(t,e,n){return B.f(t,e,r(1,n))}:function(t,e,n){return t[e]=n,t},M="__core-js_shared__",x=d[M]||p(M,{}),P=Function.toString;"function"!=typeof x.inspectSource&&(x.inspectSource=function(t){return P.call(t)});var O,T,I,j,V,R,L,N,U,z,H=x.inspectSource,Y=d.WeakMap,Z="function"==typeof Y&&/native code/.test(H(Y)),K=n(function(t){(t.exports=function(t,e){return x[t]||(x[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.6.4",mode:"global",copyright:"Â© 2020 Denis Pushkarev (zloirock.ru)"})}),G=0,W=Math.random(),q=K("keys"),$={},X=d.WeakMap;L=Z?(O=new X,T=O.get,I=O.has,j=O.set,V=function(t,e){return j.call(O,t,e),e},R=function(t){return T.call(O,t)||{}},function(t){return I.call(O,t)}):(N=q[U="state"]||(q[U]=(z=U,"Symbol("+String(void 0===z?"":z)+")_"+(++G+W).toString(36))),$[N]=!0,V=function(t,e){return w(t,N,e),e},R=function(t){return c(t,N)?t[N]:{}},function(t){return c(t,N)});function J(t){return"function"==typeof t?t:void 0}function Q(t,e){return arguments.length<2?J(ot[t])||J(d[t]):ot[t]&&ot[t][e]||d[t]&&d[t][e]}function tt(t){return isNaN(t=+t)?0:(0<t?ht:lt)(t)}function et(t){return 0<t?ct(tt(t),9007199254740991):0}function nt(l){return function(t,e,n){var u,i,r,a=h(t),s=et(a.length),o=(u=s,(i=tt(n))<0?ft(i+u,0):pt(i,u));if(l&&e!=e){for(;o<s;)if((r=a[o++])!=r)return!0}else for(;o<s;o++)if((l||o in a)&&a[o]===e)return l||o||0;return!l&&-1}}function ut(t,e){var n,u=h(t),i=0,r=[];for(n in u)!c($,n)&&c(u,n)&&r.push(n);for(;e.length>i;)c(u,n=e[i++])&&(~dt(r,n)||r.push(n));return r}function it(t,e){var n=bt[At(t)];return n==Et||n!=Ct&&("function"==typeof e?i(e):!!e)}function rt(t,e){var n,u,i,r,a=t.target,s=t.global,o=t.stat,l=s?d:o?d[a]||p(a,{}):(d[a]||{}).prototype;if(l)for(n in e){if(i=e[n],u=t.noTargetGet?(r=St(l,n))&&r.value:l[n],!Ft(s?n:a+(o?".":"#")+n,t.forced)&&void 0!==u){if(typeof i==typeof u)continue;!function(t,e){for(var n=mt(e),u=B.f,i=S.f,r=0;r<n.length;r++){var a=n[r];c(t,a)||u(t,a,i(e,a))}}(i,u)}(t.sham||u&&u.sham)&&w(i,"sham",!0),st(l,n,i,t)}}var at={set:V,get:R,has:L,enforce:function(t){return L(t)?R(t):V(t,{})},getterFor:function(n){return function(t){var e;if(!a(t)||(e=R(t)).type!==n)throw TypeError("Incompatible receiver, "+n+" required");return e}}},st=n(function(t){var e=at.get,s=at.enforce,o=String(String).split("String");(t.exports=function(t,e,n,u){var i=!!u&&!!u.unsafe,r=!!u&&!!u.enumerable,a=!!u&&!!u.noTargetGet;"function"==typeof n&&("string"!=typeof e||c(n,"name")||w(n,"name",e),s(n).source=o.join("string"==typeof e?e:"")),t!==d?(i?!a&&t[e]&&(r=!0):delete t[e],r?t[e]=n:w(t,e,n)):r?t[e]=n:p(e,n)})(Function.prototype,"toString",function(){return"function"==typeof this&&e(this).source||H(this)})}),ot=d,lt=Math.ceil,ht=Math.floor,ct=Math.min,ft=Math.max,pt=Math.min,dt={includes:nt(!0),indexOf:nt(!1)}.indexOf,vt=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],kt=vt.concat("length","prototype"),gt={f:Object.getOwnPropertyNames||function(t){return ut(t,kt)}},yt={f:Object.getOwnPropertySymbols},mt=Q("Reflect","ownKeys")||function(t){var e=gt.f(o(t)),n=yt.f;return n?e.concat(n(t)):e},_t=/#|\.prototype\./,At=it.normalize=function(t){return String(t).replace(_t,".").toLowerCase()},bt=it.data={},Ct=it.NATIVE="N",Et=it.POLYFILL="P",Ft=it,St=S.f,Dt=Object.keys||function(t){return ut(t,vt)},Bt=Object.assign,wt=Object.defineProperty,Mt=!Bt||i(function(){if(v&&1!==Bt({b:1},Bt(wt({},"a",{enumerable:!0,get:function(){wt(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return 1;var t={},e={},n=Symbol(),u="abcdefghijklmnopqrst";return t[n]=7,u.split("").forEach(function(t){e[t]=t}),7!=Bt({},t)[n]||Dt(Bt({},e)).join("")!=u})?function(t,e){for(var n=Object(f(t)),u=arguments.length,i=1,r=yt.f,a=g.f;i<u;)for(var s,o=_(arguments[i++]),l=r?Dt(o).concat(r(o)):Dt(o),h=l.length,c=0;c<h;)s=l[c++],v&&!a.call(o,s)||(n[s]=o[s]);return n}:Bt;rt({target:"Object",stat:!0,forced:Object.assign!==Mt},{assign:Mt});function xt(l){return function(t,e,n){var u,i,r=String(f(t)),a=r.length,s=void 0===n?" ":String(n),o=et(e);return o<=a||""==s?r:(u=o-a,(i=Pt.call(s,Ot(u/s.length))).length>u&&(i=i.slice(0,u)),l?r+i:i+r)}}var Pt="".repeat||function(t){var e=String(f(this)),n="",u=tt(t);if(u<0||u==1/0)throw RangeError("Wrong number of repetitions");for(;0<u;(u>>>=1)&&(e+=e))1&u&&(n+=e);return n},Ot=Math.ceil,Tt={start:xt(!1),end:xt(!0)},It=Q("navigator","userAgent")||"",jt=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(It),Vt=Tt.end;rt({target:"String",proto:!0,forced:jt},{padEnd:function(t,e){return Vt(this,t,1<arguments.length?e:void 0)}});var Rt=Tt.start;function Lt(t){return(Lt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Nt(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ut(t,e){for(var n=0;n<e.length;n++){var u=e[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(t,u.key,u)}}function zt(t,e,n){return e&&Ut(t.prototype,e),n&&Ut(t,n),t}function Ht(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Zt(t,e)}function Yt(t){return(Yt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Zt(t,e){return(Zt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Kt(t,e){if(null==t)return{};var n,u=function(t,e){if(null==t)return{};for(var n,u={},i=Object.keys(t),r=0;r<i.length;r++)n=i[r],0<=e.indexOf(n)||(u[n]=t[n]);return u}(t,e);if(Object.getOwnPropertySymbols)for(var i=Object.getOwnPropertySymbols(t),r=0;r<i.length;r++)n=i[r],0<=e.indexOf(n)||Object.prototype.propertyIsEnumerable.call(t,n)&&(u[n]=t[n]);return u}function Gt(t,e){return!e||"object"!=typeof e&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Wt(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Yt(t)););return t}function qt(t,e,n){return(qt="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var u=Wt(t,e);if(u){var i=Object.getOwnPropertyDescriptor(u,e);return i.get?i.get.call(n):i.value}})(t,e,n||t)}function $t(t,e,n,u){return($t="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,u){var i,r,a,s,o=Wt(t,e);if(o){if((i=Object.getOwnPropertyDescriptor(o,e)).set)return i.set.call(u,n),!0;if(!i.writable)return!1}if(i=Object.getOwnPropertyDescriptor(u,e)){if(!i.writable)return!1;i.value=n,Object.defineProperty(u,e,i)}else s=n,(a=e)in(r=u)?Object.defineProperty(r,a,{value:s,enumerable:!0,configurable:!0,writable:!0}):r[a]=s;return!0})(t,e,n,u)}function Xt(t,e,n,u,i){if(!$t(t,e,n,u||t)&&i)throw new Error("failed to set property");return n}function Jt(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var n=[],u=!0,i=!1,r=void 0;try{for(var a,s=t[Symbol.iterator]();!(u=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);u=!0);}catch(t){i=!0,r=t}finally{try{u||null==s.return||s.return()}finally{if(i)throw r}}return n}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function Qt(t){return"string"==typeof t||t instanceof String}rt({target:"String",proto:!0,forced:jt},{padStart:function(t,e){return Rt(this,t,1<arguments.length?e:void 0)}}),rt({target:"String",proto:!0},{repeat:Pt}),rt({global:!0},{globalThis:d});var te="NONE",ee="LEFT",ne="FORCE_LEFT",ue="RIGHT",ie="FORCE_RIGHT";function re(t){return t.replace(/([.*+?^=!:${}()|[\]/\\])/g,"\\$1")}var ae=function(){function i(t,e,n,u){for(Nt(this,i),this.value=t,this.cursorPos=e,this.oldValue=n,this.oldSelection=u;this.value.slice(0,this.startChangePos)!==this.oldValue.slice(0,this.startChangePos);)--this.oldSelection.start}return zt(i,[{key:"startChangePos",get:function(){return Math.min(this.cursorPos,this.oldSelection.start)}},{key:"insertedCount",get:function(){return this.cursorPos-this.startChangePos}},{key:"inserted",get:function(){return this.value.substr(this.startChangePos,this.insertedCount)}},{key:"removedCount",get:function(){return Math.max(this.oldSelection.end-this.startChangePos||this.oldValue.length-this.value.length,0)}},{key:"removed",get:function(){return this.oldValue.substr(this.startChangePos,this.removedCount)}},{key:"head",get:function(){return this.value.substring(0,this.startChangePos)}},{key:"tail",get:function(){return this.value.substring(this.startChangePos+this.insertedCount)}},{key:"removeDirection",get:function(){return!this.removedCount||this.insertedCount?te:this.oldSelection.end===this.cursorPos||this.oldSelection.start===this.cursorPos?ue:ee}}]),i}(),se=function(){function e(t){Nt(this,e),Object.assign(this,{inserted:"",rawInserted:"",skip:!1,tailShift:0},t)}return zt(e,[{key:"aggregate",value:function(t){return this.rawInserted+=t.rawInserted,this.skip=this.skip||t.skip,this.inserted+=t.inserted,this.tailShift+=t.tailShift,this}},{key:"offset",get:function(){return this.tailShift+this.inserted.length}}]),e}(),oe=function(){function u(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"",e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,n=2<arguments.length?arguments[2]:void 0;Nt(this,u),this.value=t,this.from=e,this.stop=n}return zt(u,[{key:"toString",value:function(){return this.value}},{key:"extend",value:function(t){this.value+=String(t)}},{key:"appendTo",value:function(t){return t.append(this.toString(),{tail:!0}).aggregate(t._appendPlaceholder())}},{key:"shiftBefore",value:function(t){if(this.from>=t||!this.value.length)return"";var e=this.value[0];return this.value=this.value.slice(1),e}},{key:"state",get:function(){return{value:this.value,from:this.from,stop:this.stop}},set:function(t){Object.assign(this,t)}}]),u}();function le(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return new le.InputMask(t,e)}var he=function(){function e(t){Nt(this,e),this._value="",this._update(Object.assign({},e.DEFAULTS,{},t)),this.isInitialized=!0}return zt(e,[{key:"updateOptions",value:function(t){Object.keys(t).length&&this.withValueRefresh(this._update.bind(this,t))}},{key:"_update",value:function(t){Object.assign(this,t)}},{key:"reset",value:function(){this._value=""}},{key:"resolve",value:function(t){return this.reset(),this.append(t,{input:!0},""),this.doCommit(),this.value}},{key:"nearestInputPos",value:function(t){return t}},{key:"extractInput",value:function(t,e){var n=0<arguments.length&&void 0!==t?t:0,u=1<arguments.length&&void 0!==e?e:this.value.length;return this.value.slice(n,u)}},{key:"extractTail",value:function(t,e){var n=0<arguments.length&&void 0!==t?t:0,u=1<arguments.length&&void 0!==e?e:this.value.length;return new oe(this.extractInput(n,u),n)}},{key:"appendTail",value:function(t){return Qt(t)&&(t=new oe(String(t))),t.appendTo(this)}},{key:"_appendCharRaw",value:function(t,e){var n=1<arguments.length&&void 0!==e?e:{};return(t=this.doPrepare(t,n))?(this._value+=t,new se({inserted:t,rawInserted:t})):new se}},{key:"_appendChar",value:function(t,e,n){var u,i,r,a,s=1<arguments.length&&void 0!==e?e:{},o=2<arguments.length?n:void 0,l=this.state,h=this._appendCharRaw(t,s);return h.inserted&&((a=!1!==this.doValidate(s))&&null!=o&&(i=this.state,this.overwrite&&(u=o.state,o.shiftBefore(this.value.length)),(a=(r=this.appendTail(o)).rawInserted===o.toString())&&r.inserted&&(this.state=i)),a||(h=new se,this.state=l,o&&u&&(o.state=u))),h}},{key:"_appendPlaceholder",value:function(){return new se}},{key:"append",value:function(t,e,n){if(!Qt(t))throw new Error("value should be string");var u=new se,i=Qt(n)?new oe(String(n)):n;e.tail&&(e._beforeTailState=this.state);for(var r=0;r<t.length;++r)u.aggregate(this._appendChar(t[r],e,i));return null!=i&&(u.tailShift+=this.appendTail(i).tailShift),u}},{key:"remove",value:function(t,e){var n=0<arguments.length&&void 0!==t?t:0,u=1<arguments.length&&void 0!==e?e:this.value.length;return this._value=this.value.slice(0,n)+this.value.slice(u),new se}},{key:"withValueRefresh",value:function(t){if(this._refreshing||!this.isInitialized)return t();this._refreshing=!0;var e=this.rawInputValue,n=this.value,u=t();return this.rawInputValue=e,this.value!==n&&0===n.indexOf(this.value)&&this.append(n.slice(this.value.length),{},""),delete this._refreshing,u}},{key:"runIsolated",value:function(t){if(this._isolated||!this.isInitialized)return t(this);this._isolated=!0;var e=this.state,n=t(this);return this.state=e,delete this._isolated,n}},{key:"doPrepare",value:function(t,e){var n=1<arguments.length&&void 0!==e?e:{};return this.prepare?this.prepare(t,this,n):t}},{key:"doValidate",value:function(t){return(!this.validate||this.validate(this.value,this,t))&&(!this.parent||this.parent.doValidate(t))}},{key:"doCommit",value:function(){this.commit&&this.commit(this.value,this)}},{key:"doFormat",value:function(t){return this.format?this.format(t,this):t}},{key:"doParse",value:function(t){return this.parse?this.parse(t,this):t}},{key:"splice",value:function(t,e,n,u){var i=t+e,r=this.extractTail(i),a=this.nearestInputPos(t,u);return new se({tailShift:a-t}).aggregate(this.remove(a)).aggregate(this.append(n,{input:!0},r))}},{key:"state",get:function(){return{_value:this.value}},set:function(t){this._value=t._value}},{key:"value",get:function(){return this._value},set:function(t){this.resolve(t)}},{key:"unmaskedValue",get:function(){return this.value},set:function(t){this.reset(),this.append(t,{},""),this.doCommit()}},{key:"typedValue",get:function(){return this.doParse(this.value)},set:function(t){this.value=this.doFormat(t)}},{key:"rawInputValue",get:function(){return this.extractInput(0,this.value.length,{raw:!0})},set:function(t){this.reset(),this.append(t,{raw:!0},""),this.doCommit()}},{key:"isComplete",get:function(){return!0}}]),e}();function ce(t){if(null==t)throw new Error("mask property should be defined");return t instanceof RegExp?le.MaskedRegExp:Qt(t)?le.MaskedPattern:t instanceof Date||t===Date?le.MaskedDate:t instanceof Number||"number"==typeof t||t===Number?le.MaskedNumber:Array.isArray(t)||t===Array?le.MaskedDynamic:le.Masked&&t.prototype instanceof le.Masked?t:t instanceof Function?le.MaskedFunction:t instanceof le.Masked?t.constructor:(console.warn("Mask not found for mask",t),le.Masked)}function fe(t){if(le.Masked&&t instanceof le.Masked)return t;var e=(t=Object.assign({},t)).mask;if(le.Masked&&e instanceof le.Masked)return e;var n=ce(e);if(!n)throw new Error("Masked class is not found for provided mask, appropriate module needs to be import manually before creating mask.");return new n(t)}he.DEFAULTS={format:function(t){return t},parse:function(t){return t}},le.Masked=he,le.createMask=fe;var pe={0:/\d/,a:/[\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,"*":/./},de=function(){function u(t){Nt(this,u);var e=t.mask,n=Kt(t,["mask"]);this.masked=fe({mask:e}),Object.assign(this,n)}return zt(u,[{key:"reset",value:function(){this._isFilled=!1,this.masked.reset()}},{key:"remove",value:function(t,e){var n=0<arguments.length&&void 0!==t?t:0,u=1<arguments.length&&void 0!==e?e:this.value.length;return 0===n&&1<=u?(this._isFilled=!1,this.masked.remove(n,u)):new se}},{key:"_appendChar",value:function(t,e){var n=1<arguments.length&&void 0!==e?e:{};if(this._isFilled)return new se;var u=this.masked.state,i=this.masked._appendChar(t,n);return i.inserted&&!1===this.doValidate(n)&&(i.inserted=i.rawInserted="",this.masked.state=u),i.inserted||this.isOptional||this.lazy||n.input||(i.inserted=this.placeholderChar),i.skip=!i.inserted&&!this.isOptional,this._isFilled=Boolean(i.inserted),i}},{key:"append",value:function(){var t;return(t=this.masked).append.apply(t,arguments)}},{key:"_appendPlaceholder",value:function(){var t=new se;return this._isFilled||this.isOptional||(this._isFilled=!0,t.inserted=this.placeholderChar),t}},{key:"extractTail",value:function(){var t;return(t=this.masked).extractTail.apply(t,arguments)}},{key:"appendTail",value:function(){var t;return(t=this.masked).appendTail.apply(t,arguments)}},{key:"extractInput",value:function(t,e,n){var u=0<arguments.length&&void 0!==t?t:0,i=1<arguments.length&&void 0!==e?e:this.value.length,r=2<arguments.length?n:void 0;return this.masked.extractInput(u,i,r)}},{key:"nearestInputPos",value:function(t,e){var n=1<arguments.length&&void 0!==e?e:te,u=this.value.length,i=Math.min(Math.max(t,0),u);switch(n){case ee:case ne:return this.isComplete?i:0;case ue:case ie:return this.isComplete?i:u;case te:default:return i}}},{key:"doValidate",value:function(){var t,e;return(t=this.masked).doValidate.apply(t,arguments)&&(!this.parent||(e=this.parent).doValidate.apply(e,arguments))}},{key:"doCommit",value:function(){this.masked.doCommit()}},{key:"value",get:function(){return this.masked.value||(this._isFilled&&!this.isOptional?this.placeholderChar:"")}},{key:"unmaskedValue",get:function(){return this.masked.unmaskedValue}},{key:"isComplete",get:function(){return Boolean(this.masked.value)||this.isOptional}},{key:"state",get:function(){return{masked:this.masked.state,_isFilled:this._isFilled}},set:function(t){this.masked.state=t.masked,this._isFilled=t._isFilled}}]),u}(),ve=function(){function e(t){Nt(this,e),Object.assign(this,t),this._value=""}return zt(e,[{key:"reset",value:function(){this._isRawInput=!1,this._value=""}},{key:"remove",value:function(t,e){var n=0<arguments.length&&void 0!==t?t:0,u=1<arguments.length&&void 0!==e?e:this._value.length;return this._value=this._value.slice(0,n)+this._value.slice(u),this._value||(this._isRawInput=!1),new se}},{key:"nearestInputPos",value:function(t,e){var n=1<arguments.length&&void 0!==e?e:te,u=this._value.length;switch(n){case ee:case ne:return 0;case te:case ue:case ie:default:return u}}},{key:"extractInput",value:function(t,e,n){var u=0<arguments.length&&void 0!==t?t:0,i=1<arguments.length&&void 0!==e?e:this._value.length;return(2<arguments.length&&void 0!==n?n:{}).raw&&this._isRawInput&&this._value.slice(u,i)||""}},{key:"_appendChar",value:function(t,e){var n=1<arguments.length&&void 0!==e?e:{},u=new se;if(this._value)return u;var i=this.char===t[0]&&(this.isUnmasking||n.input||n.raw)&&!n.tail;return i&&(u.rawInserted=this.char),this._value=u.inserted=this.char,this._isRawInput=i&&(n.raw||n.input),u}},{key:"_appendPlaceholder",value:function(){var t=new se;return this._value||(this._value=t.inserted=this.char),t}},{key:"extractTail",value:function(t,e){1<arguments.length&&void 0!==e||this.value.length;return new oe("")}},{key:"appendTail",value:function(t){return Qt(t)&&(t=new oe(String(t))),t.appendTo(this)}},{key:"append",value:function(t,e,n){var u=this._appendChar(t,e);return null!=n&&(u.tailShift+=this.appendTail(n).tailShift),u}},{key:"doCommit",value:function(){}},{key:"value",get:function(){return this._value}},{key:"unmaskedValue",get:function(){return this.isUnmasking?this.value:""}},{key:"isComplete",get:function(){return!0}},{key:"state",get:function(){return{_value:this._value,_isRawInput:this._isRawInput}},set:function(t){Object.assign(this,t)}}]),e}(),ke=function(){function l(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0;Nt(this,l),this.chunks=t,this.from=e}return zt(l,[{key:"toString",value:function(){return this.chunks.map(String).join("")}},{key:"extend",value:function(t){if(String(t)){Qt(t)&&(t=new oe(String(t)));var e,n=this.chunks[this.chunks.length-1],u=n&&(n.stop===t.stop||null==t.stop)&&t.from===n.from+n.toString().length;if(t instanceof oe)u?n.extend(t.toString()):this.chunks.push(t);else if(t instanceof l){if(null==t.stop)for(;t.chunks.length&&null==t.chunks[0].stop;)(e=t.chunks.shift()).from+=t.from,this.extend(e);t.toString()&&(t.stop=t.blockIndex,this.chunks.push(t))}}}},{key:"appendTo",value:function(t){if(!(t instanceof le.MaskedPattern))return new oe(this.toString()).appendTo(t);for(var e=new se,n=0;n<this.chunks.length&&!e.skip;++n){var u,i,r=this.chunks[n],a=t._mapPosToBlock(t.value.length),s=r.stop,o=void 0;null!=s&&(!a||a.index<=s)&&((r instanceof l||0<=t._stops.indexOf(s))&&e.aggregate(t._appendPlaceholder(s)),o=r instanceof l&&t._blocks[s]),o?((u=o.appendTail(r)).skip=!1,e.aggregate(u),t._value+=u.inserted,(i=r.toString().slice(u.rawInserted.length))&&e.aggregate(t.append(i,{tail:!0}))):e.aggregate(t.append(r.toString(),{tail:!0}))}return e}},{key:"shiftBefore",value:function(t){if(this.from>=t||!this.chunks.length)return"";for(var e=t-this.from,n=0;n<this.chunks.length;){var u=this.chunks[n],i=u.shiftBefore(e);if(u.toString()){if(!i)break;++n}else this.chunks.splice(n,1);if(i)return i}return""}},{key:"state",get:function(){return{chunks:this.chunks.map(function(t){return t.state}),from:this.from,stop:this.stop,blockIndex:this.blockIndex}},set:function(t){var e=t.chunks,n=Kt(t,["chunks"]);Object.assign(this,n),this.chunks=e.map(function(t){var e=new("chunks"in t?l:oe);return e.state=t,e})}}]),l}(),ge=function(){function t(){return Nt(this,t),Gt(this,Yt(t).apply(this,arguments))}return Ht(t,he),zt(t,[{key:"_update",value:function(e){e.mask&&(e.validate=function(t){return 0<=t.search(e.mask)}),qt(Yt(t.prototype),"_update",this).call(this,e)}}]),t}();le.MaskedRegExp=ge;var ye=function(){function l(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};return Nt(this,l),t.definitions=Object.assign({},pe,t.definitions),Gt(this,Yt(l).call(this,Object.assign({},l.DEFAULTS,{},t)))}return Ht(l,he),zt(l,[{key:"_update",value:function(t){var e=0<arguments.length&&void 0!==t?t:{};e.definitions=Object.assign({},this.definitions,e.definitions),qt(Yt(l.prototype),"_update",this).call(this,e),this._rebuildMask()}},{key:"_rebuildMask",value:function(){var i=this,t=this.definitions;this._blocks=[],this._stops=[],this._maskedBlocks={};var r=this.mask;if(r&&t)for(var e=!1,n=!1,a=0;a<r.length;++a){if(this.blocks)if("continue"===function(){var e=r.slice(a),t=Object.keys(i.blocks).filter(function(t){return 0===e.indexOf(t)});t.sort(function(t,e){return e.length-t.length});var n=t[0];if(n){var u=fe(Object.assign({parent:i,lazy:i.lazy,placeholderChar:i.placeholderChar,overwrite:i.overwrite},i.blocks[n]));return u&&(i._blocks.push(u),i._maskedBlocks[n]||(i._maskedBlocks[n]=[]),i._maskedBlocks[n].push(i._blocks.length-1)),a+=n.length-1,"continue"}}())continue;var u=r[a],s=u in t;if(u!==l.STOP_CHAR)if("{"!==u&&"}"!==u)if("["!==u&&"]"!==u){if(u===l.ESCAPE_CHAR){if(!(u=r[++a]))break;s=!1}var o=s?new de({parent:this,lazy:this.lazy,placeholderChar:this.placeholderChar,mask:t[u],isOptional:n}):new ve({char:u,isUnmasking:e});this._blocks.push(o)}else n=!n;else e=!e;else this._stops.push(this._blocks.length)}}},{key:"reset",value:function(){qt(Yt(l.prototype),"reset",this).call(this),this._blocks.forEach(function(t){return t.reset()})}},{key:"doCommit",value:function(){this._blocks.forEach(function(t){return t.doCommit()}),qt(Yt(l.prototype),"doCommit",this).call(this)}},{key:"appendTail",value:function(t){return qt(Yt(l.prototype),"appendTail",this).call(this,t).aggregate(this._appendPlaceholder())}},{key:"_appendCharRaw",value:function(t,e){var n=1<arguments.length&&void 0!==e?e:{};t=this.doPrepare(t,n);var u=this._mapPosToBlock(this.value.length),i=new se;if(!u)return i;for(var r=u.index;;++r){var a=this._blocks[r];if(!a)break;var s=a._appendChar(t,n),o=s.skip;if(i.aggregate(s),o||s.rawInserted)break}return i}},{key:"extractTail",value:function(t,e){var r=this,n=0<arguments.length&&void 0!==t?t:0,u=1<arguments.length&&void 0!==e?e:this.value.length,a=new ke;return n===u||this._forEachBlocksInRange(n,u,function(t,e,n,u){var i=t.extractTail(n,u);i.stop=r._findStopBefore(e),i.from=r._blockStartPos(e),i instanceof ke&&(i.blockIndex=e),a.extend(i)}),a}},{key:"extractInput",value:function(t,e,n){var u=0<arguments.length&&void 0!==t?t:0,i=1<arguments.length&&void 0!==e?e:this.value.length,r=2<arguments.length&&void 0!==n?n:{};if(u===i)return"";var a="";return this._forEachBlocksInRange(u,i,function(t,e,n,u){a+=t.extractInput(n,u,r)}),a}},{key:"_findStopBefore",value:function(t){for(var e,n=0;n<this._stops.length;++n){var u=this._stops[n];if(!(u<=t))break;e=u}return e}},{key:"_appendPlaceholder",value:function(u){var i=this,r=new se;if(this.lazy&&null==u)return r;var t=this._mapPosToBlock(this.value.length);if(!t)return r;var e=t.index,n=null!=u?u:this._blocks.length;return this._blocks.slice(e,n).forEach(function(t){var e,n;t.lazy&&null==u||(e=null!=t._blocks?[t._blocks.length]:[],n=t._appendPlaceholder.apply(t,e),i._value+=n.inserted,r.aggregate(n))}),r}},{key:"_mapPosToBlock",value:function(t){for(var e="",n=0;n<this._blocks.length;++n){var u=this._blocks[n],i=e.length;if(t<=(e+=u.value).length)return{index:n,offset:t-i}}}},{key:"_blockStartPos",value:function(t){return this._blocks.slice(0,t).reduce(function(t,e){return t+e.value.length},0)}},{key:"_forEachBlocksInRange",value:function(t,e,n){var u=1<arguments.length&&void 0!==e?e:this.value.length,i=2<arguments.length?n:void 0,r=this._mapPosToBlock(t);if(r){var a=this._mapPosToBlock(u),s=a&&r.index===a.index,o=r.offset,l=a&&s?a.offset:this._blocks[r.index].value.length;if(i(this._blocks[r.index],r.index,o,l),a&&!s){for(var h=r.index+1;h<a.index;++h)i(this._blocks[h],h,0,this._blocks[h].value.length);i(this._blocks[a.index],a.index,0,a.offset)}}}},{key:"remove",value:function(t,e){var n=0<arguments.length&&void 0!==t?t:0,u=1<arguments.length&&void 0!==e?e:this.value.length,i=qt(Yt(l.prototype),"remove",this).call(this,n,u);return this._forEachBlocksInRange(n,u,function(t,e,n,u){i.aggregate(t.remove(n,u))}),i}},{key:"nearestInputPos",value:function(t,e){var n=1<arguments.length&&void 0!==e?e:te,u=this._mapPosToBlock(t)||{index:0,offset:0},i=u.offset,r=u.index,a=this._blocks[r];if(!a)return t;var s=i;0!==s&&s<a.value.length&&(s=a.nearestInputPos(i,function(t){switch(t){case ee:return ne;case ue:return ie;default:return t}}(n)));var o=s===a.value.length;if(!(0===s)&&!o)return this._blockStartPos(r)+s;var l=o?r+1:r;if(n===te){if(0<l){var h=l-1,c=this._blocks[h],f=c.nearestInputPos(0,te);if(!c.value.length||f!==c.value.length)return this._blockStartPos(l)}for(var p=l;p<this._blocks.length;++p){var d=this._blocks[p],v=d.nearestInputPos(0,te);if(!d.value.length||v!==d.value.length)return this._blockStartPos(p)+v}for(var k=l-1;0<=k;--k){var g=this._blocks[k],y=g.nearestInputPos(0,te);if(!g.value.length||y!==g.value.length)return this._blockStartPos(k)+g.value.length}return t}if(n===ee||n===ne){for(var m,_=l;_<this._blocks.length;++_)if(this._blocks[_].value){m=_;break}if(null!=m){var A=this._blocks[m],b=A.nearestInputPos(0,ue);if(0===b&&A.unmaskedValue.length)return this._blockStartPos(m)+b}for(var C,E=-1,F=l-1;0<=F;--F){var S=this._blocks[F],D=S.nearestInputPos(S.value.length,ne);if(S.value&&0===D||(C=F),0!==D){if(D!==S.value.length)return this._blockStartPos(F)+D;E=F;break}}if(n===ee)for(var B=E+1;B<=Math.min(l,this._blocks.length-1);++B){var w=this._blocks[B],M=w.nearestInputPos(0,te),x=this._blockStartPos(B)+M;if(t<x)break;if(M!==w.value.length)return x}if(0<=E)return this._blockStartPos(E)+this._blocks[E].value.length;if(n===ne||this.lazy&&!this.extractInput()&&!function(t){if(!t)return!1;var e=t.value;return!e||t.nearestInputPos(0,te)!==e.length}(this._blocks[l]))return 0;if(null!=C)return this._blockStartPos(C);for(var P=l;P<this._blocks.length;++P){var O=this._blocks[P],T=O.nearestInputPos(0,te);if(!O.value.length||T!==O.value.length)return this._blockStartPos(P)+T}return 0}if(n===ue||n===ie){for(var I,j,V=l;V<this._blocks.length;++V){var R=this._blocks[V],L=R.nearestInputPos(0,te);if(L!==R.value.length){j=this._blockStartPos(V)+L,I=V;break}}if(null!=I&&null!=j){for(var N=I;N<this._blocks.length;++N){var U=this._blocks[N],z=U.nearestInputPos(0,ie);if(z!==U.value.length)return this._blockStartPos(N)+z}return n===ie?this.value.length:j}for(var H=Math.min(l,this._blocks.length-1);0<=H;--H){var Y=this._blocks[H],Z=Y.nearestInputPos(Y.value.length,ee);if(0!==Z){var K=this._blockStartPos(H)+Z;if(t<=K)return K;break}}}return t}},{key:"maskedBlock",value:function(t){return this.maskedBlocks(t)[0]}},{key:"maskedBlocks",value:function(t){var e=this,n=this._maskedBlocks[t];return n?n.map(function(t){return e._blocks[t]}):[]}},{key:"state",get:function(){return Object.assign({},qt(Yt(l.prototype),"state",this),{_blocks:this._blocks.map(function(t){return t.state})})},set:function(t){var n=t._blocks,e=Kt(t,["_blocks"]);this._blocks.forEach(function(t,e){return t.state=n[e]}),Xt(Yt(l.prototype),"state",e,this,!0)}},{key:"isComplete",get:function(){return this._blocks.every(function(t){return t.isComplete})}},{key:"unmaskedValue",get:function(){return this._blocks.reduce(function(t,e){return t+e.unmaskedValue},"")},set:function(t){Xt(Yt(l.prototype),"unmaskedValue",t,this,!0)}},{key:"value",get:function(){return this._blocks.reduce(function(t,e){return t+e.value},"")},set:function(t){Xt(Yt(l.prototype),"value",t,this,!0)}}]),l}();ye.DEFAULTS={lazy:!0,placeholderChar:"_"},ye.STOP_CHAR="`",ye.ESCAPE_CHAR="\\",ye.InputDefinition=de,ye.FixedDefinition=ve,le.MaskedPattern=ye;var me=function(){function f(){return Nt(this,f),Gt(this,Yt(f).apply(this,arguments))}return Ht(f,ye),zt(f,[{key:"_update",value:function(t){t=Object.assign({to:this.to||0,from:this.from||0},t);var e=String(t.to).length;null!=t.maxLength&&(e=Math.max(e,t.maxLength)),t.maxLength=e;for(var n=String(t.from).padStart(e,"0"),u=String(t.to).padStart(e,"0"),i=0;i<u.length&&u[i]===n[i];)++i;t.mask=u.slice(0,i).replace(/0/g,"\\0")+"0".repeat(e-i),qt(Yt(f.prototype),"_update",this).call(this,t)}},{key:"boundaries",value:function(t){var e="",n="",u=Jt(t.match(/^(\D*)(\d*)(\D*)/)||[],3),i=u[1],r=u[2];return r&&(e="0".repeat(i.length)+r,n="9".repeat(i.length)+r),[e=e.padEnd(this.maxLength,"0"),n=n.padEnd(this.maxLength,"9")]}},{key:"doPrepare",value:function(t,e){var n=1<arguments.length&&void 0!==e?e:{};if(t=qt(Yt(f.prototype),"doPrepare",this).call(this,t,n).replace(/\D/g,""),!this.autofix)return t;for(var u=String(this.from).padStart(this.maxLength,"0"),i=String(this.to).padStart(this.maxLength,"0"),r=this.value,a="",s=0;s<t.length;++s){var o=r+a+t[s],l=Jt(this.boundaries(o),2),h=l[0],c=l[1];Number(c)<this.from?a+=u[o.length-1]:Number(h)>this.to?a+=i[o.length-1]:a+=t[s]}return a}},{key:"doValidate",value:function(){var t,e=this.value;if(-1===e.search(/[^0]/)&&e.length<=this._matchFrom)return!0;for(var n=Jt(this.boundaries(e),2),u=n[0],i=n[1],r=arguments.length,a=new Array(r),s=0;s<r;s++)a[s]=arguments[s];return this.from<=Number(i)&&Number(u)<=this.to&&(t=qt(Yt(f.prototype),"doValidate",this)).call.apply(t,[this].concat(a))}},{key:"_matchFrom",get:function(){return this.maxLength-String(this.from).length}},{key:"isComplete",get:function(){return qt(Yt(f.prototype),"isComplete",this)&&Boolean(this.value)}}]),f}();le.MaskedRange=me;var _e=function(){function r(t){return Nt(this,r),Gt(this,Yt(r).call(this,Object.assign({},r.DEFAULTS,{},t)))}return Ht(r,ye),zt(r,[{key:"_update",value:function(n){n.mask===Date&&delete n.mask,n.pattern&&(n.mask=n.pattern);var t=n.blocks;n.blocks=Object.assign({},r.GET_DEFAULT_BLOCKS()),n.min&&(n.blocks.Y.from=n.min.getFullYear()),n.max&&(n.blocks.Y.to=n.max.getFullYear()),n.min&&n.max&&n.blocks.Y.from===n.blocks.Y.to&&(n.blocks.m.from=n.min.getMonth()+1,n.blocks.m.to=n.max.getMonth()+1,n.blocks.m.from===n.blocks.m.to&&(n.blocks.d.from=n.min.getDate(),n.blocks.d.to=n.max.getDate())),Object.assign(n.blocks,t),Object.keys(n.blocks).forEach(function(t){var e=n.blocks[t];"autofix"in e||(e.autofix=n.autofix)}),qt(Yt(r.prototype),"_update",this).call(this,n)}},{key:"doValidate",value:function(){for(var t,e=this.date,n=arguments.length,u=new Array(n),i=0;i<n;i++)u[i]=arguments[i];return(t=qt(Yt(r.prototype),"doValidate",this)).call.apply(t,[this].concat(u))&&(!this.isComplete||this.isDateExist(this.value)&&null!=e&&(null==this.min||this.min<=e)&&(null==this.max||e<=this.max))}},{key:"isDateExist",value:function(t){return 0<=this.format(this.parse(t,this),this).indexOf(t)}},{key:"date",get:function(){return this.typedValue},set:function(t){this.typedValue=t}},{key:"typedValue",get:function(){return this.isComplete?qt(Yt(r.prototype),"typedValue",this):null},set:function(t){Xt(Yt(r.prototype),"typedValue",t,this,!0)}}]),r}();_e.DEFAULTS={pattern:"d{.}`m{.}`Y",format:function(t){return[String(t.getDate()).padStart(2,"0"),String(t.getMonth()+1).padStart(2,"0"),t.getFullYear()].join(".")},parse:function(t){var e=Jt(t.split("."),3),n=e[0],u=e[1],i=e[2];return new Date(i,u-1,n)}},_e.GET_DEFAULT_BLOCKS=function(){return{d:{mask:me,from:1,to:31,maxLength:2},m:{mask:me,from:1,to:12,maxLength:2},Y:{mask:me,from:1900,to:9999}}},le.MaskedDate=_e;var Ae=function(){function t(){Nt(this,t)}return zt(t,[{key:"select",value:function(t,e){if(null!=t&&null!=e&&(t!==this.selectionStart||e!==this.selectionEnd))try{this._unsafeSelect(t,e)}catch(t){}}},{key:"_unsafeSelect",value:function(){}},{key:"bindEvents",value:function(){}},{key:"unbindEvents",value:function(){}},{key:"selectionStart",get:function(){var t;try{t=this._unsafeSelectionStart}catch(t){}return null!=t?t:this.value.length}},{key:"selectionEnd",get:function(){var t;try{t=this._unsafeSelectionEnd}catch(t){}return null!=t?t:this.value.length}},{key:"isActive",get:function(){return!1}}]),t}();le.MaskElement=Ae;var be=function(){function u(t){var e;return Nt(this,u),(e=Gt(this,Yt(u).call(this))).input=t,e._handlers={},e}return Ht(u,Ae),zt(u,[{key:"_unsafeSelect",value:function(t,e){this.input.setSelectionRange(t,e)}},{key:"bindEvents",value:function(e){var n=this;Object.keys(e).forEach(function(t){return n._toggleEventHandler(u.EVENTS_MAP[t],e[t])})}},{key:"unbindEvents",value:function(){var e=this;Object.keys(this._handlers).forEach(function(t){return e._toggleEventHandler(t)})}},{key:"_toggleEventHandler",value:function(t,e){this._handlers[t]&&(this.input.removeEventListener(t,this._handlers[t]),delete this._handlers[t]),e&&(this.input.addEventListener(t,e),this._handlers[t]=e)}},{key:"rootElement",get:function(){return this.input.getRootNode?this.input.getRootNode():document}},{key:"isActive",get:function(){return this.input===this.rootElement.activeElement}},{key:"_unsafeSelectionStart",get:function(){return this.input.selectionStart}},{key:"_unsafeSelectionEnd",get:function(){return this.input.selectionEnd}},{key:"value",get:function(){return this.input.value},set:function(t){this.input.value=t}}]),u}();be.EVENTS_MAP={selectionChange:"keydown",input:"input",drop:"drop",click:"click",focus:"focus",commit:"blur"},le.HTMLMaskElement=be;var Ce=function(){function t(){return Nt(this,t),Gt(this,Yt(t).apply(this,arguments))}return Ht(t,be),zt(t,[{key:"_unsafeSelect",value:function(t,e){var n,u,i;this.rootElement.createRange&&((n=this.rootElement.createRange()).setStart(this.input.firstChild||this.input,t),n.setEnd(this.input.lastChild||this.input,e),(i=(u=this.rootElement).getSelection&&u.getSelection())&&(i.removeAllRanges(),i.addRange(n)))}},{key:"_unsafeSelectionStart",get:function(){var t=this.rootElement,e=t.getSelection&&t.getSelection();return e&&e.anchorOffset}},{key:"_unsafeSelectionEnd",get:function(){var t=this.rootElement,e=t.getSelection&&t.getSelection();return e&&this._unsafeSelectionStart+String(e).length}},{key:"value",get:function(){return this.input.textContent},set:function(t){this.input.textContent=t}}]),t}();le.HTMLContenteditableMaskElement=Ce;var Ee=function(){function n(t,e){Nt(this,n),this.el=t instanceof Ae?t:new(t.isContentEditable&&"INPUT"!==t.tagName&&"TEXTAREA"!==t.tagName?Ce:be)(t),this.masked=fe(e),this._listeners={},this._value="",this._unmaskedValue="",this._saveSelection=this._saveSelection.bind(this),this._onInput=this._onInput.bind(this),this._onChange=this._onChange.bind(this),this._onDrop=this._onDrop.bind(this),this._onFocus=this._onFocus.bind(this),this._onClick=this._onClick.bind(this),this.alignCursor=this.alignCursor.bind(this),this.alignCursorFriendly=this.alignCursorFriendly.bind(this),this._bindEvents(),this.updateValue(),this._onChange()}return zt(n,[{key:"maskEquals",value:function(t){return null==t||t===this.masked.mask||t===Date&&this.masked instanceof _e}},{key:"_bindEvents",value:function(){this.el.bindEvents({selectionChange:this._saveSelection,input:this._onInput,drop:this._onDrop,click:this._onClick,focus:this._onFocus,commit:this._onChange})}},{key:"_unbindEvents",value:function(){this.el&&this.el.unbindEvents()}},{key:"_fireEvent",value:function(t){for(var e=arguments.length,n=new Array(1<e?e-1:0),u=1;u<e;u++)n[u-1]=arguments[u];var i=this._listeners[t];i&&i.forEach(function(t){return t.apply(void 0,n)})}},{key:"_saveSelection",value:function(){this.value!==this.el.value&&console.warn("Element value was changed outside of mask. Syncronize mask using `mask.updateValue()` to work properly."),this._selection={start:this.selectionStart,end:this.cursorPos}}},{key:"updateValue",value:function(){this.masked.value=this.el.value,this._value=this.masked.value}},{key:"updateControl",value:function(){var t=this.masked.unmaskedValue,e=this.masked.value,n=this.unmaskedValue!==t||this.value!==e;this._unmaskedValue=t,this._value=e,this.el.value!==e&&(this.el.value=e),n&&this._fireChangeEvents()}},{key:"updateOptions",value:function(t){var e=t.mask,n=Kt(t,["mask"]),u=!this.maskEquals(e),i=!function t(e,n){if(n===e)return 1;var u=Array.isArray(n),i=Array.isArray(e);if(u&&i){if(n.length!=e.length)return;for(h=0;h<n.length;h++)if(!t(n[h],e[h]))return;return 1}if(u==i){if(n&&e&&"object"===Lt(n)&&"object"===Lt(e)){var r=n instanceof Date,a=e instanceof Date;if(r&&a)return n.getTime()==e.getTime();if(r!=a)return;var s=n instanceof RegExp,o=e instanceof RegExp;if(s&&o)return n.toString()==e.toString();if(s!=o)return;for(var l=Object.keys(n),h=0;h<l.length;h++)if(!Object.prototype.hasOwnProperty.call(e,l[h]))return;for(h=0;h<l.length;h++)if(!t(e[l[h]],n[l[h]]))return;return 1}return n&&e&&"function"==typeof n&&"function"==typeof e&&n.toString()===e.toString()}}(this.masked,n);u&&(this.mask=e),i&&this.masked.updateOptions(n),(u||i)&&this.updateControl()}},{key:"updateCursor",value:function(t){null!=t&&(this.cursorPos=t,this._delayUpdateCursor(t))}},{key:"_delayUpdateCursor",value:function(t){var e=this;this._abortUpdateCursor(),this._changingCursorPos=t,this._cursorChanging=setTimeout(function(){e.el&&(e.cursorPos=e._changingCursorPos,e._abortUpdateCursor())},10)}},{key:"_fireChangeEvents",value:function(){this._fireEvent("accept",this._inputEvent),this.masked.isComplete&&this._fireEvent("complete",this._inputEvent)}},{key:"_abortUpdateCursor",value:function(){this._cursorChanging&&(clearTimeout(this._cursorChanging),delete this._cursorChanging)}},{key:"alignCursor",value:function(){this.cursorPos=this.masked.nearestInputPos(this.cursorPos,ee)}},{key:"alignCursorFriendly",value:function(){this.selectionStart===this.cursorPos&&this.alignCursor()}},{key:"on",value:function(t,e){return this._listeners[t]||(this._listeners[t]=[]),this._listeners[t].push(e),this}},{key:"off",value:function(t,e){if(!this._listeners[t])return this;if(!e)return delete this._listeners[t],this;var n=this._listeners[t].indexOf(e);return 0<=n&&this._listeners[t].splice(n,1),this}},{key:"_onInput",value:function(t){if(this._inputEvent=t,this._abortUpdateCursor(),!this._selection)return this.updateValue();var e=new ae(this.el.value,this.cursorPos,this.value,this._selection),n=this.masked.rawInputValue,u=this.masked.splice(e.startChangePos,e.removed.length,e.inserted,e.removeDirection).offset,i=n===this.masked.rawInputValue?e.removeDirection:te,r=this.masked.nearestInputPos(e.startChangePos+u,i);this.updateControl(),this.updateCursor(r),delete this._inputEvent}},{key:"_onChange",value:function(){this.value!==this.el.value&&this.updateValue(),this.masked.doCommit(),this.updateControl(),this._saveSelection()}},{key:"_onDrop",value:function(t){t.preventDefault(),t.stopPropagation()}},{key:"_onFocus",value:function(){this.alignCursorFriendly()}},{key:"_onClick",value:function(){this.alignCursorFriendly()}},{key:"destroy",value:function(){this._unbindEvents(),this._listeners.length=0,delete this.el}},{key:"mask",get:function(){return this.masked.mask},set:function(t){var e;this.maskEquals(t)||(t instanceof le.Masked||this.masked.constructor!==ce(t)?((e=fe({mask:t})).unmaskedValue=this.masked.unmaskedValue,this.masked=e):this.masked.updateOptions({mask:t}))}},{key:"value",get:function(){return this._value},set:function(t){this.masked.value=t,this.updateControl(),this.alignCursor()}},{key:"unmaskedValue",get:function(){return this._unmaskedValue},set:function(t){this.masked.unmaskedValue=t,this.updateControl(),this.alignCursor()}},{key:"typedValue",get:function(){return this.masked.typedValue},set:function(t){this.masked.typedValue=t,this.updateControl(),this.alignCursor()}},{key:"selectionStart",get:function(){return this._cursorChanging?this._changingCursorPos:this.el.selectionStart}},{key:"cursorPos",get:function(){return this._cursorChanging?this._changingCursorPos:this.el.selectionEnd},set:function(t){this.el&&this.el.isActive&&(this.el.select(t,t),this._saveSelection())}}]),n}();le.InputMask=Ee;var Fe=function(){function r(){return Nt(this,r),Gt(this,Yt(r).apply(this,arguments))}return Ht(r,ye),zt(r,[{key:"_update",value:function(t){t.enum&&(t.mask="*".repeat(t.enum[0].length)),qt(Yt(r.prototype),"_update",this).call(this,t)}},{key:"doValidate",value:function(){for(var t,e=this,n=arguments.length,u=new Array(n),i=0;i<n;i++)u[i]=arguments[i];return this.enum.some(function(t){return 0<=t.indexOf(e.unmaskedValue)})&&(t=qt(Yt(r.prototype),"doValidate",this)).call.apply(t,[this].concat(u))}}]),r}();le.MaskedEnum=Fe;var Se=function(){function o(t){return Nt(this,o),Gt(this,Yt(o).call(this,Object.assign({},o.DEFAULTS,{},t)))}return Ht(o,he),zt(o,[{key:"_update",value:function(t){qt(Yt(o.prototype),"_update",this).call(this,t),this._updateRegExps()}},{key:"_updateRegExps",value:function(){var t="^"+(this.allowNegative?"[+|\\-]?":""),e=(this.scale?"("+re(this.radix)+"\\d{0,"+this.scale+"})?":"")+"$";this._numberRegExpInput=new RegExp(t+"(0|([1-9]+\\d*))?"+e),this._numberRegExp=new RegExp(t+"\\d*"+e),this._mapToRadixRegExp=new RegExp("["+this.mapToRadix.map(re).join("")+"]","g"),this._thousandsSeparatorRegExp=new RegExp(re(this.thousandsSeparator),"g")}},{key:"_removeThousandsSeparators",value:function(t){return t.replace(this._thousandsSeparatorRegExp,"")}},{key:"_insertThousandsSeparators",value:function(t){var e=t.split(this.radix);return e[0]=e[0].replace(/\B(?=(\d{3})+(?!\d))/g,this.thousandsSeparator),e.join(this.radix)}},{key:"doPrepare",value:function(t){for(var e,n=arguments.length,u=new Array(1<n?n-1:0),i=1;i<n;i++)u[i-1]=arguments[i];return(e=qt(Yt(o.prototype),"doPrepare",this)).call.apply(e,[this,this._removeThousandsSeparators(t.replace(this._mapToRadixRegExp,this.radix))].concat(u))}},{key:"_separatorsCount",value:function(t,e){for(var n=1<arguments.length&&void 0!==e&&e,u=0,i=0;i<t;++i)this._value.indexOf(this.thousandsSeparator,i)===i&&(++u,n&&(t+=this.thousandsSeparator.length));return u}},{key:"_separatorsCountFromSlice",value:function(t){var e=0<arguments.length&&void 0!==t?t:this._value;return this._separatorsCount(this._removeThousandsSeparators(e).length,!0)}},{key:"extractInput",value:function(t,e,n){var u=0<arguments.length&&void 0!==t?t:0,i=1<arguments.length&&void 0!==e?e:this.value.length,r=2<arguments.length?n:void 0,a=Jt(this._adjustRangeWithSeparators(u,i),2),u=a[0],i=a[1];return this._removeThousandsSeparators(qt(Yt(o.prototype),"extractInput",this).call(this,u,i,r))}},{key:"_appendCharRaw",value:function(t,e){var n=1<arguments.length&&void 0!==e?e:{};if(!this.thousandsSeparator)return qt(Yt(o.prototype),"_appendCharRaw",this).call(this,t,n);var u=n.tail&&n._beforeTailState?n._beforeTailState._value:this._value,i=this._separatorsCountFromSlice(u);this._value=this._removeThousandsSeparators(this.value);var r=qt(Yt(o.prototype),"_appendCharRaw",this).call(this,t,n);this._value=this._insertThousandsSeparators(this._value);var a=n.tail&&n._beforeTailState?n._beforeTailState._value:this._value,s=this._separatorsCountFromSlice(a);return r.tailShift+=(s-i)*this.thousandsSeparator.length,r.skip=!r.rawInserted&&t===this.thousandsSeparator,r}},{key:"_findSeparatorAround",value:function(t){if(this.thousandsSeparator){var e=t-this.thousandsSeparator.length+1,n=this.value.indexOf(this.thousandsSeparator,e);if(n<=t)return n}return-1}},{key:"_adjustRangeWithSeparators",value:function(t,e){var n=this._findSeparatorAround(t);0<=n&&(t=n);var u=this._findSeparatorAround(e);return 0<=u&&(e=u+this.thousandsSeparator.length),[t,e]}},{key:"remove",value:function(t,e){var n=0<arguments.length&&void 0!==t?t:0,u=1<arguments.length&&void 0!==e?e:this.value.length,i=Jt(this._adjustRangeWithSeparators(n,u),2),n=i[0],u=i[1],r=this.value.slice(0,n),a=this.value.slice(u),s=this._separatorsCount(r.length);this._value=this._insertThousandsSeparators(this._removeThousandsSeparators(r+a));var o=this._separatorsCountFromSlice(r);return new se({tailShift:(o-s)*this.thousandsSeparator.length})}},{key:"nearestInputPos",value:function(t,e){if(!this.thousandsSeparator)return t;switch(e){case te:case ee:case ne:var n=this._findSeparatorAround(t-1);if(0<=n){var u=n+this.thousandsSeparator.length;if(t<u||this.value.length<=u||e===ne)return n}break;case ue:case ie:var i=this._findSeparatorAround(t);if(0<=i)return i+this.thousandsSeparator.length}return t}},{key:"doValidate",value:function(t){var e,n=(t.input?this._numberRegExpInput:this._numberRegExp).test(this._removeThousandsSeparators(this.value));return n&&(e=this.number,n=n&&!isNaN(e)&&(null==this.min||0<=this.min||this.min<=this.number)&&(null==this.max||this.max<=0||this.number<=this.max)),n&&qt(Yt(o.prototype),"doValidate",this).call(this,t)}},{key:"doCommit",value:function(){var t,e,n;this.value&&(e=t=this.number,null!=this.min&&(e=Math.max(e,this.min)),null!=this.max&&(e=Math.min(e,this.max)),e!==t&&(this.unmaskedValue=String(e)),n=this.value,this.normalizeZeros&&(n=this._normalizeZeros(n)),this.padFractionalZeros&&(n=this._padFractionalZeros(n)),this._value=n),qt(Yt(o.prototype),"doCommit",this).call(this)}},{key:"_normalizeZeros",value:function(t){var e=this._removeThousandsSeparators(t).split(this.radix);return e[0]=e[0].replace(/^(\D*)(0*)(\d*)/,function(t,e,n,u){return e+u}),t.length&&!/\d$/.test(e[0])&&(e[0]=e[0]+"0"),1<e.length&&(e[1]=e[1].replace(/0*$/,""),e[1].length||(e.length=1)),this._insertThousandsSeparators(e.join(this.radix))}},{key:"_padFractionalZeros",value:function(t){if(!t)return t;var e=t.split(this.radix);return e.length<2&&e.push(""),e[1]=e[1].padEnd(this.scale,"0"),e.join(this.radix)}},{key:"unmaskedValue",get:function(){return this._removeThousandsSeparators(this._normalizeZeros(this.value)).replace(this.radix,".")},set:function(t){Xt(Yt(o.prototype),"unmaskedValue",t.replace(".",this.radix),this,!0)}},{key:"typedValue",get:function(){return Number(this.unmaskedValue)},set:function(t){Xt(Yt(o.prototype),"unmaskedValue",String(t),this,!0)}},{key:"number",get:function(){return this.typedValue},set:function(t){this.typedValue=t}},{key:"allowNegative",get:function(){return this.signed||null!=this.min&&this.min<0||null!=this.max&&this.max<0}}]),o}();Se.DEFAULTS={radix:",",thousandsSeparator:"",mapToRadix:["."],scale:2,signed:!1,normalizeZeros:!0,padFractionalZeros:!1},le.MaskedNumber=Se;var De=function(){function e(){return Nt(this,e),Gt(this,Yt(e).apply(this,arguments))}return Ht(e,he),zt(e,[{key:"_update",value:function(t){t.mask&&(t.validate=t.mask),qt(Yt(e.prototype),"_update",this).call(this,t)}}]),e}();le.MaskedFunction=De;var Be=function(){function r(t){var e;return Nt(this,r),(e=Gt(this,Yt(r).call(this,Object.assign({},r.DEFAULTS,{},t)))).currentMask=null,e}return Ht(r,he),zt(r,[{key:"_update",value:function(t){qt(Yt(r.prototype),"_update",this).call(this,t),"mask"in t&&(this.compiledMasks=Array.isArray(t.mask)?t.mask.map(fe):[])}},{key:"_appendCharRaw",value:function(){var t,e=this._applyDispatch.apply(this,arguments);return this.currentMask&&e.aggregate((t=this.currentMask)._appendChar.apply(t,arguments)),e}},{key:"_applyDispatch",value:function(t,e){var n,u=0<arguments.length&&void 0!==t?t:"",i=1<arguments.length&&void 0!==e?e:{},r=i.tail&&null!=i._beforeTailState?i._beforeTailState._value:this.value,a=this.rawInputValue,s=i.tail&&null!=i._beforeTailState?i._beforeTailState._rawInputValue:a,o=a.slice(s.length),l=this.currentMask,h=new se,c=l&&l.state;return this.currentMask=this.doDispatch(u,Object.assign({},i)),this.currentMask&&(this.currentMask!==l?(this.currentMask.reset(),n=this.currentMask.append(s,{raw:!0}),h.tailShift=n.inserted.length-r.length,o&&(h.tailShift+=this.currentMask.append(o,{raw:!0,tail:!0}).tailShift)):this.currentMask.state=c),h}},{key:"_appendPlaceholder",value:function(){var t=this._applyDispatch.apply(this,arguments);return this.currentMask&&t.aggregate(this.currentMask._appendPlaceholder()),t}},{key:"doDispatch",value:function(t,e){var n=1<arguments.length&&void 0!==e?e:{};return this.dispatch(t,this,n)}},{key:"doValidate",value:function(){for(var t,e,n=arguments.length,u=new Array(n),i=0;i<n;i++)u[i]=arguments[i];return(t=qt(Yt(r.prototype),"doValidate",this)).call.apply(t,[this].concat(u))&&(!this.currentMask||(e=this.currentMask).doValidate.apply(e,u))}},{key:"reset",value:function(){this.currentMask&&this.currentMask.reset(),this.compiledMasks.forEach(function(t){return t.reset()})}},{key:"remove",value:function(){var t,e=new se;return this.currentMask&&e.aggregate((t=this.currentMask).remove.apply(t,arguments)).aggregate(this._applyDispatch()),e}},{key:"extractInput",value:function(){var t;return this.currentMask?(t=this.currentMask).extractInput.apply(t,arguments):""}},{key:"extractTail",value:function(){for(var t,e,n=arguments.length,u=new Array(n),i=0;i<n;i++)u[i]=arguments[i];return this.currentMask?(t=this.currentMask).extractTail.apply(t,u):(e=qt(Yt(r.prototype),"extractTail",this)).call.apply(e,[this].concat(u))}},{key:"doCommit",value:function(){this.currentMask&&this.currentMask.doCommit(),qt(Yt(r.prototype),"doCommit",this).call(this)}},{key:"nearestInputPos",value:function(){for(var t,e,n=arguments.length,u=new Array(n),i=0;i<n;i++)u[i]=arguments[i];return this.currentMask?(t=this.currentMask).nearestInputPos.apply(t,u):(e=qt(Yt(r.prototype),"nearestInputPos",this)).call.apply(e,[this].concat(u))}},{key:"value",get:function(){return this.currentMask?this.currentMask.value:""},set:function(t){Xt(Yt(r.prototype),"value",t,this,!0)}},{key:"unmaskedValue",get:function(){return this.currentMask?this.currentMask.unmaskedValue:""},set:function(t){Xt(Yt(r.prototype),"unmaskedValue",t,this,!0)}},{key:"typedValue",get:function(){return this.currentMask?this.currentMask.typedValue:""},set:function(t){var e=String(t);this.currentMask&&(this.currentMask.typedValue=t,e=this.currentMask.unmaskedValue),this.unmaskedValue=e}},{key:"isComplete",get:function(){return!!this.currentMask&&this.currentMask.isComplete}},{key:"state",get:function(){return Object.assign({},qt(Yt(r.prototype),"state",this),{_rawInputValue:this.rawInputValue,compiledMasks:this.compiledMasks.map(function(t){return t.state}),currentMaskRef:this.currentMask,currentMask:this.currentMask&&this.currentMask.state})},set:function(t){var n=t.compiledMasks,e=t.currentMaskRef,u=t.currentMask,i=Kt(t,["compiledMasks","currentMaskRef","currentMask"]);this.compiledMasks.forEach(function(t,e){return t.state=n[e]}),null!=e&&(this.currentMask=e,this.currentMask.state=u),Xt(Yt(r.prototype),"state",i,this,!0)}},{key:"overwrite",get:function(){return this.currentMask?this.currentMask.overwrite:qt(Yt(r.prototype),"overwrite",this)},set:function(){console.warn('"overwrite" option is not available in dynamic mask, use this option in siblings')}}]),r}();Be.DEFAULTS={dispatch:function(n,t,u){if(t.compiledMasks.length){var i=t.rawInputValue,e=t.compiledMasks.map(function(t,e){return t.reset(),t.append(i,{raw:!0}),t.append(n,u),{weight:t.rawInputValue.length,index:e}});return e.sort(function(t,e){return e.weight-t.weight}),t.compiledMasks[e[0].index]}}},le.MaskedDynamic=Be;var we={MASKED:"value",UNMASKED:"unmaskedValue",TYPED:"typedValue"};function Me(t){var n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:we.MASKED,u=2<arguments.length&&void 0!==arguments[2]?arguments[2]:we.MASKED,i=fe(t);return function(e){return i.runIsolated(function(t){return t[n]=e,t[u]})}}function xe(t){for(var e=arguments.length,n=new Array(1<e?e-1:0),u=1;u<e;u++)n[u-1]=arguments[u];return Me.apply(void 0,n)(t)}le.PIPE_TYPE=we,le.createPipe=Me,le.pipe=xe;try{globalThis.IMask=le}catch(t){}t.HTMLContenteditableMaskElement=Ce,t.HTMLMaskElement=be,t.InputMask=Ee,t.MaskElement=Ae,t.Masked=he,t.MaskedDate=_e,t.MaskedDynamic=Be,t.MaskedEnum=Fe,t.MaskedFunction=De,t.MaskedNumber=Se,t.MaskedPattern=ye,t.MaskedRange=me,t.MaskedRegExp=ge,t.PIPE_TYPE=we,t.createMask=fe,t.createPipe=Me,t.default=le,t.pipe=xe,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
